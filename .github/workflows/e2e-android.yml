name: E2E Android
on:
  pull_request:
    paths:
      - .github/workflows/e2e-android.yml
      - apps/common/example/**
      - android/**
      - src/**
      - e2e/**
      - package.json
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      WORKING_DIRECTORY: paper-example
      API_LEVEL: 34
      SYSTEM_IMAGES: system-images;android-34;google_apis;x86_64
      AVD_NAME: rn-svg-avd
    concurrency:
      group: android-e2e-example-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'gradle'

      - name: Install Android SDK components
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install \
            "platform-tools" \
            "platforms;android-${API_LEVEL}" \
            "system-images;android-${API_LEVEL};google_apis;x86_64" \
            "emulator"

      - name: Create emulator
        run: echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n $AVD_NAME -k "${SYSTEM_IMAGES}" --device "pixel_6"

      - name: Boot emulator
        run: |
          $ANDROID_HOME/emulator/emulator -avd $AVD_NAME -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim &
          $ANDROID_HOME/platform-tools/adb wait-for-device
          $ANDROID_HOME/platform-tools/adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
          echo "Emulator booted successfully."

      - name: Reverse TCP
        working-directory: apps/${{ env.WORKING_DIRECTORY }}
        run: $ANDROID_HOME/platform-tools/adb devices | grep '\t' | awk '{print $1}' | sed 's/\\s//g' | xargs -I {} $ANDROID_HOME/platform-tools/adb -s {} reverse tcp:8081 tcp:8081

      - name: Install root node dependencies
        run: yarn

      - name: Install example app node dependencies
        working-directory: apps/${{ env.WORKING_DIRECTORY }}
        run: yarn

      - name: Build Android app
        working-directory: apps/${{ env.WORKING_DIRECTORY }}/android
        run: ./gradlew assembleDebug

      - name: Start Metro server
        working-directory: apps/${{ env.WORKING_DIRECTORY }}
        run: E2E=true yarn start &> output.log &

      - name: Install APK
        run: $ANDROID_HOME/platform-tools/adb install -r apps/${{ env.WORKING_DIRECTORY }}/android/app/build/outputs/apk/debug/app-debug.apk

      - name: Launch APK
        run: |
          PACKAGE="com.example"
          ACTIVITY=".MainActivity"
          echo "Launching $PACKAGE/$ACTIVITY..."
          $ANDROID_HOME/platform-tools/adb shell am start -n "$PACKAGE/$ACTIVITY"
          $ANDROID_HOME/platform-tools/adb shell 'until pidof com.example > /dev/null; do sleep 1; done'
          echo "App started."

      - name: Run E2E Tests
        run: E2E=true yarn e2e

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: report
          path: |
            report.html
            jest-html-reporters-attach/

      - name: Kill emulator (so it can be cached safely)
        run: adb devices | grep emulator | cut -f1 | while read line; do adb -s $line emu kill; done
